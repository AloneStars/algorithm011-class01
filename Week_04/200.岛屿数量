class Solution {

    class Node{
		int height;
		int width;
		public Node(int height, int width) {
			super();
			this.height = height;
			this.width = width;
		}
	}

    public int numIslands(char[][] grid) {
        int height = grid.length;
        if(height == 0) return 0;
        int width = grid[0].length;
        if(width == 0) return 0;
        int island = 0;
        for(int i = 0; i < height; i++ ) {
        	for(int j = 0; j < width; j++ ) {
        		if(grid[i][j] == '1') {
        			island++;
        			Queue queue = new LinkedList<Node>();
        			queue.add(new Node(i,j));
        			grid[i][j] = '0';
        			while(!queue.isEmpty()) {
        				int size = queue.size();
        				for(int k = 0;k < size;k++) {
        					Node node = (Node) queue.poll();
        					int row = node.height;
        					int col = node.width;
        					if((row - 1 >= 0) && grid[row -1 ][col] == '1') {
        						queue.offer(new Node(row - 1,col));
        						grid[row - 1][col] = 0;
        					}
        					if((row + 1 < height) && grid[row + 1][col] == '1') {
        						queue.offer(new Node(row + 1,col));
        						grid[row + 1][col] = 0;
        					}
        					if((col - 1 >= 0) && grid[row][col - 1] == '1') {
        						queue.offer(new Node(row,col-1));
        						grid[row][col-1] = 0;
        					}
        					if((col + 1 < width) && grid[row][col+1] == '1') {
        						queue.offer(new Node(row,col+1));
        						grid[row][col+1] = 0;
        					}
        				}
        			}
        		}
        	}
        }
        return island;
    }
}