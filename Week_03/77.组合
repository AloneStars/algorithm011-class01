class Solution {

    List<List<Integer>> combines = new LinkedList();

    public void backtrack(int first, LinkedList<Integer> curr, int n, int k) {
        // if the combination is done
        if (curr.size() == k)
        combines.add(new LinkedList(curr));

        for (int i = first; i < n + 1; ++i) {
        // add i into the current combination
        curr.add(i);
        // use next integers to complete the combination
        backtrack(i + 1, curr, n, k);
        // backtrack
        curr.removeLast();
        }
    }

    public List<List<Integer>> combine(int n, int k) {
        backtrack(1, new LinkedList<Integer>(),n,k);
        return combines;
    }

}